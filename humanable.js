// Generated by CoffeeScript 1.7.1
(function() {
  var Humanable, assert, to_float;

  assert = require('assert');

  to_float = function(str) {
    if (/^\d+(\.\d*)?$/.test(str)) {
      return parseFloat(str);
    }
    return null;
  };


  /*
  crate a Humable by specified a scale, e.g 
  ['b,B',1024,'kb,KB',1024, 'm, M, mb, MB', 1024, 'g, G, gb, GB', 1024, 'T, TB']
   */

  module.exports = Humanable = function(scale) {
    var scale_num, _i, _j, _results, _results1, _scales, _unit_index, _units;
    assert.ok(scale.length % 2 === 1, 'scale list must be odd');
    scale_num = Math.floor(scale.length / 2) + 1;
    _units = (function() {
      _results = [];
      for (var _i = 0; 0 <= scale_num ? _i < scale_num : _i > scale_num; 0 <= scale_num ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      return scale[i * 2].split(',').map(function(item) {
        return item.trim();
      });
    });
    _scales = (function() {
      _results1 = [];
      for (var _j = 1; 1 <= scale_num ? _j < scale_num : _j > scale_num; 1 <= scale_num ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).map(function(i) {
      return scale[i * 2 - 1];
    });
    _scales.unshift(1);
    _unit_index = function(unit) {
      var i, _k, _ref;
      for (i = _k = 0, _ref = _units.length; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
        if (_units[i].indexOf(unit) >= 0) {
          return i;
        }
      }
      return -1;
    };
    return {
      parse: function(str, unit) {
        var from_index, from_unit, m, num, to_index, _k, _l, _len, _len1, _ref, _ref1;
        if (to_float(str)) {
          return to_float(str);
        }
        if (unit == null) {
          unit = _units[0][0];
        }
        m = /^(\d+(\.\d+)?)([A-Za-z]+)$/.exec(str);
        if (!m) {
          return null;
        }
        num = parseFloat(m[1]);
        from_unit = m[3];
        from_index = _unit_index(from_unit);
        if (from_index < 0) {
          throw new Error("" + from_unit + " is not a illegal unit");
        }
        to_index = _unit_index(unit);
        if (to_index < 0) {
          throw new Error("" + unit + " is not a illegal unit");
        }
        if (from_index === to_index) {
          return num;
        } else if (from_index > to_index) {
          _ref = _scales.slice(to_index + 1, +from_index + 1 || 9e9);
          for (_k = 0, _len = _ref.length; _k < _len; _k++) {
            scale = _ref[_k];
            num = num * scale;
          }
          return num;
        } else {
          _ref1 = _scales.slice(from_index + 1, +to_index + 1 || 9e9);
          for (_l = 0, _len1 = _ref1.length; _l < _len1; _l++) {
            scale = _ref1[_l];
            num = num / scale;
          }
          return num;
        }
      },
      format: function(str) {}
    };
  };

}).call(this);
